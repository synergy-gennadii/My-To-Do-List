// D:\WebAppNginxSQL\static\script.js

const todoForm = document.getElementById('todoForm');
const todoTitleInput = document.getElementById('todoTitle');
const todoList = document.getElementById('todoList');
const statusMessage = document.getElementById('statusMessage');

async function fetchTodos() {
    try {
        const response = await fetch('/api/todos');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        todoList.innerHTML = '';
        data.forEach(todo => {
            const li = document.createElement('li');
            li.dataset.id = todo.id;
            li.classList.toggle('completed', todo.is_completed);
            li.innerHTML = `
                <span class="todo-title">${todo.title}</span>
                <div class="actions">
                    <button class="complete-btn" data-completed="${todo.is_completed}" title="${todo.is_completed ? '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ' : '–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'}">
                        ${todo.is_completed ? '‚úÖ' : '‚ùì'}
                    </button>
                    <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            `;
            todoList.appendChild(li);
        });
        displayStatus('–ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.', 'success');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', error);
        displayStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏.', 'error');
    }
}

async function addTodo(title) {
    try {
        const response = await fetch('/api/todos', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: title })
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        await response.json();
        displayStatus('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
        todoTitleInput.value = '';
        fetchTodos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        displayStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.', 'error');
    }
}

async function toggleTodoCompleted(id, isCompleted) {
    try {
        const response = await fetch(`/api/todos/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ is_completed: !isCompleted })
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        await response.json();
        displayStatus('–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
        fetchTodos();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
        displayStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.', 'error');
    }
}

async function deleteTodo(id) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
        return;
    }
    try {
        const response = await fetch(`/api/todos/${id}`, {
            method: 'DELETE'
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        // await response.json(); // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. 204 No Content –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON

        // --- –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–£ –ß–ê–°–¢–¨ –ö–û–î–ê ---
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (li) –ø–æ –µ–≥–æ data-id –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ DOM
        const itemToRemove = document.querySelector(`li[data-id="${id}"]`);
        if (itemToRemove) {
            itemToRemove.remove(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ HTML
        }
        // --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ---

        displayStatus('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success');
        // fetchTodos(); // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, —Ç.–∫. –º—ã —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
                         // –ï–≥–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ "–∑–∞–ø–∞—Å–Ω–æ–π" –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏,
                         // –Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ª—É—á—à–µ —É–¥–∞–ª—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é.
                         // –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å.
                         // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        displayStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.', 'error');
    }
}



function displayStatus(message, type) {
    statusMessage.textContent = message;
    statusMessage.className = `status-message ${type}`;
    setTimeout(() => {
        statusMessage.textContent = '';
        statusMessage.className = 'status-message';
    }, 3000);
}

// Event Listeners
todoForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const title = todoTitleInput.value.trim();
    if (title) {
        addTodo(title);
    } else {
        displayStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.', 'error');
    }
});

todoList.addEventListener('click', (e) => {
    const listItem = e.target.closest('li');
    if (!listItem) return;

    const todoId = parseInt(listItem.dataset.id);

    if (e.target.classList.contains('complete-btn')) {
        const isCompleted = e.target.dataset.completed === 'true';
        toggleTodoCompleted(todoId, isCompleted);
    } else if (e.target.classList.contains('delete-btn')) {
        deleteTodo(todoId);
    }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fetchTodos();